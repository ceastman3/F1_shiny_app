})
output$map = renderLeaflet({
races = races |>
filter(year==input$season)
leaflet(data=races) |>
addTiles() |>
setView(lng = -30, lat = 30, zoom = 2) |>
addCircleMarkers(radius = 5,
color = "#FF1E00",
popup=~paste("<b>Race:</b>", race_name,
"<br><b>Circuit:</b>", circuit_name,
"<br><b>City:</b>", location,
"<br><b>Country:</b>", country,
"<br><b>Date:</b>", date))
})
output$season_standings = renderPlot({
season_results = results |>
filter(year==input$season) |>
group_by(driverId, full_name, constr_name) |>
summarise(total_points = sum(points, na.rm = TRUE), .groups = "drop")
ggplot(season_results, aes(y=reorder(full_name, +total_points), x=total_points, fill = constr_name)) +
geom_bar(stat="identity") +
geom_text(aes(label = total_points), hjust = -0.2, size = 3) +
labs(x = "Total Points",
y = "Driver",
title = "Total Points per Driver",
fill = "Constructor") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8),
legend.position = "right")
})
output$schedule = renderDataTable({
races %>%
filter(year==input$season) |>
select(Round=round, Date=date, Race=race_name, Circuit=circuit_name, Location=location, Country=country)
})
output$position_table = renderDataTable({
results %>%
filter(year==input$season, raceId == selected_raceId()) |>
select(Position=positionText,
Forname=forename,
Surname=surname,
Number=driver_num,
Nationality=nationality,
Constructor=constr_name,
Time=time,
Points=points,
Status=status)
})
}
shinyApp(ui, server)
ui = fluidPage(
titlePanel(
# img(src="f1_logo.png", align="left"),
h1("Formula 1 Season Statistics", style={'color:white;
background-color:#FF1E00;
border-radius:5px;
padding:5px'})
),
navbarPage(
tabPanel("Overview",
fluidRow(
column(3, selectInput("stats", "Select Topic", c("Season", "Race"))),
column(3, selectInput("season", "Select Season", unique(seasons$year), selected = "2023")),
column(6,
conditionalPanel(
condition = "input.stats == 'Race'",
selectizeInput("race_search", "Select a Race", races$race_name, multiple = FALSE)
)
)
),
fluidRow(
column(20,
conditionalPanel(
condition = "input.stats == 'Season'",
h3("Total Points Per Driver", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
plotOutput("season_standings")
),
conditionalPanel(
condition = "input.stats == 'Race'",
dataTableOutput("position_table")
)
)
),
fluidRow(
column(10,
h3("Circuit Locations", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
leafletOutput("map")),
column(10,
h3("Race Schedule", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
dataTableOutput("schedule"))
)
)
),
width=20
)
ui = fluidPage(
titlePanel(
# img(src="f1_logo.png", align="left"),
h1("Formula 1 Season Statistics", style={'color:white;
background-color:#FF1E00;
border-radius:5px;
padding:5px'})
),
navbarPage(
tabPanel("Overview",
fluidRow(
column(3, selectInput("stats", "Select Topic", c("Season", "Race"))),
column(3, selectInput("season", "Select Season", unique(seasons$year), selected = "2023")),
column(6,
conditionalPanel(
condition = "input.stats == 'Race'",
selectizeInput("race_search", "Select a Race", races$race_name, multiple = FALSE)
)
)
),
fluidRow(
column(12,
conditionalPanel(
condition = "input.stats == 'Season'",
h3("Total Points Per Driver", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
plotOutput("season_standings")
),
conditionalPanel(
condition = "input.stats == 'Race'",
dataTableOutput("position_table")
)
)
),
fluidRow(
column(6,
h3("Circuit Locations", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
leafletOutput("map")),
column(6,
h3("Race Schedule", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
dataTableOutput("schedule"))
)
)
),
width=20
)
server = function(input, output) {
selected_raceId <- reactive({
if (!is.null(input$race_search) && input$stats == "Race") {
raceId <- races[races$race_name == input$race_search, "raceId"]
return(raceId)
}
else { return(NULL) }
})
output$map = renderLeaflet({
races = races |>
filter(year==input$season)
leaflet(data=races) |>
addTiles() |>
setView(lng = -30, lat = 30, zoom = 2) |>
addCircleMarkers(radius = 5,
color = "#FF1E00",
popup=~paste("<b>Race:</b>", race_name,
"<br><b>Circuit:</b>", circuit_name,
"<br><b>City:</b>", location,
"<br><b>Country:</b>", country,
"<br><b>Date:</b>", date))
})
output$season_standings = renderPlot({
season_results = results |>
filter(year==input$season) |>
group_by(driverId, full_name, constr_name) |>
summarise(total_points = sum(points, na.rm = TRUE), .groups = "drop")
ggplot(season_results, aes(y=reorder(full_name, +total_points), x=total_points, fill = constr_name)) +
geom_bar(stat="identity") +
geom_text(aes(label = total_points), hjust = -0.2, size = 3) +
labs(x = "Total Points",
y = "Driver",
title = "Total Points per Driver",
fill = "Constructor") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8),
legend.position = "right")
})
output$schedule = renderDataTable({
races %>%
filter(year==input$season) |>
select(Round=round, Date=date, Race=race_name, Circuit=circuit_name, Location=location, Country=country)
})
output$position_table = renderDataTable({
results %>%
filter(year==input$season, raceId == selected_raceId()) |>
select(Position=positionText,
Forname=forename,
Surname=surname,
Number=driver_num,
Nationality=nationality,
Constructor=constr_name,
Time=time,
Points=points,
Status=status)
})
}
shinyApp(ui, server)
ui = fluidPage(
titlePanel(
# img(src="f1_logo.png", align="left"),
h1("Formula 1 Season Statistics", style={'color:white;
background-color:#FF1E00;
border-radius:5px;
padding:5px'})
),
navbarPage(
tabPanel("Overview",
fluidRow(
column(3, selectInput("stats", "Select Topic", c("Season", "Race"))),
column(3, selectInput("season", "Select Season", unique(seasons$year), selected = "2023")),
column(6,
conditionalPanel(
condition = "input.stats == 'Race'",
selectizeInput("race_search", "Select a Race", races$race_name, multiple = FALSE)
)
)
),
fluidRow(
column(12,
conditionalPanel(
condition = "input.stats == 'Season'",
h3("Total Points Per Driver", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
plotOutput("season_standings")
),
conditionalPanel(
condition = "input.stats == 'Race'",
dataTableOutput("position_table")
)
)
),
fluidRow(
column(6,
h3("Circuit Locations", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
leafletOutput("map")),
column(6,
h3("Race Schedule", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
dataTableOutput("schedule"))
)
)
),
width=20
)
server = function(input, output) {
selected_raceId <- reactive({
if (!is.null(input$race_search) && input$stats == "Race") {
raceId <- races[races$race_name == input$race_search, "raceId"]
return(raceId)
}
else { return(NULL) }
})
output$map = renderLeaflet({
races = races |>
filter(year==input$season)
leaflet(data=races) |>
addTiles() |>
setView(lng = -30, lat = 30, zoom = 2) |>
addCircleMarkers(radius = 5,
color = "#FF1E00",
popup=~paste("<b>Race:</b>", race_name,
"<br><b>Circuit:</b>", circuit_name,
"<br><b>City:</b>", location,
"<br><b>Country:</b>", country,
"<br><b>Date:</b>", date))
})
output$season_standings = renderPlot({
season_results = results |>
filter(year==input$season) |>
group_by(driverId, full_name, constr_name) |>
summarise(total_points = sum(points, na.rm = TRUE), .groups = "drop")
ggplot(season_results, aes(y=reorder(full_name, +total_points), x=total_points, fill = constr_name)) +
geom_bar(stat="identity") +
geom_text(aes(label = total_points), hjust = -0.2, size = 3) +
labs(x = "Total Points",
y = "Driver",
title = "Total Points per Driver",
fill = "Constructor") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8),
legend.position = "right")
})
output$schedule = renderDataTable({
races %>%
filter(year==input$season) |>
# select(Round=round, Date=date, Race=race_name, Circuit=circuit_name, Location=location, Country=country)
select(Round=round, Date=date, Race=race_name)
})
output$position_table = renderDataTable({
results %>%
filter(year==input$season, raceId == selected_raceId()) |>
select(Position=positionText,
Forname=forename,
Surname=surname,
Number=driver_num,
Nationality=nationality,
Constructor=constr_name,
Time=time,
Points=points,
Status=status)
})
}
shinyApp(ui, server)
ui = fluidPage(
titlePanel(
# img(src="f1_logo.png", align="left"),
h1("Formula 1 Season Statistics", style={'color:white;
background-color:#FF1E00;
border-radius:5px;
padding:5px'})
),
navbarPage(
tabPanel("Overview",
fluidRow(
column(3, selectInput("stats", "Select Topic", c("Season", "Race"))),
column(3, selectInput("season", "Select Season", unique(seasons$year), selected = "2023")),
column(6,
conditionalPanel(
condition = "input.stats == 'Race'",
selectizeInput("race_search", "Select a Race", races$race_name, multiple = FALSE)
)
)
),
fluidRow(
column(12,
conditionalPanel(
condition = "input.stats == 'Season'",
h3("Total Points Per Driver", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
plotOutput("season_standings")
),
conditionalPanel(
condition = "input.stats == 'Race'",
dataTableOutput("position_table")
)
)
),
fluidRow(
column(6,
h3("Circuit Locations", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
leafletOutput("map")),
column(6,
h3("Race Schedule", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
dataTableOutput("schedule"))
)
)
),
width=20
)
server = function(input, output) {
selected_raceId <- reactive({
if (!is.null(input$race_search) && input$stats == "Race") {
raceId <- races[races$race_name == input$race_search, "raceId"]
return(raceId)
}
else { return(NULL) }
})
output$map = renderLeaflet({
races = races |>
filter(year==input$season)
leaflet(data=races) |>
addTiles() |>
setView(lng = -30, lat = 30, zoom = 2) |>
addCircleMarkers(radius = 5,
color = "#FF1E00",
popup=~paste("<b>Race:</b>", race_name,
"<br><b>Circuit:</b>", circuit_name,
"<br><b>City:</b>", location,
"<br><b>Country:</b>", country,
"<br><b>Date:</b>", date))
})
output$season_standings = renderPlot({
season_results = results |>
filter(year==input$season) |>
group_by(driverId, full_name, constr_name) |>
summarise(total_points = sum(points, na.rm = TRUE), .groups = "drop")
ggplot(season_results, aes(y=reorder(full_name, +total_points), x=total_points, fill = constr_name)) +
geom_bar(stat="identity") +
geom_text(aes(label = total_points), hjust = -0.2, size = 3) +
labs(x = "Total Points",
y = "Driver",
title = "Total Points per Driver",
fill = "Constructor") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8),
legend.position = "right")
})
output$schedule = renderDataTable({
races %>%
filter(year==input$season) |>
# select(Round=round, Date=date, Race=race_name, Circuit=circuit_name, Location=location, Country=country)
select(Date=date, Race=race_name)
})
output$position_table = renderDataTable({
results %>%
filter(year==input$season, raceId == selected_raceId()) |>
select(Position=positionText,
Forname=forename,
Surname=surname,
Number=driver_num,
Nationality=nationality,
Constructor=constr_name,
Time=time,
Points=points,
Status=status)
})
}
shinyApp(ui, server)
ui = fluidPage(
titlePanel(
# img(src="f1_logo.png", align="left"),
h1("Formula 1 Season Statistics", style={'color:white;
background-color:#FF1E00;
border-radius:5px;
padding:5px'})
),
navbarPage(
tabPanel("Overview",
fluidRow(
column(3, selectInput("stats", "Select Topic", c("Season", "Race"))),
column(3, selectInput("season", "Select Season", unique(seasons$year), selected = "2023")),
column(6,
conditionalPanel(
condition = "input.stats == 'Race'",
selectizeInput("race_search", "Select a Race", races$race_name, multiple = FALSE)
)
)
),
fluidRow(
column(12,
conditionalPanel(
condition = "input.stats == 'Season'",
h3("Total Points Per Driver", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
plotOutput("season_standings")
),
conditionalPanel(
condition = "input.stats == 'Race'",
dataTableOutput("position_table")
)
)
),
fluidRow(
column(6,
h3("Circuit Locations", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
leafletOutput("map"),
),
column(6,
h3("Race Schedule", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
dataTableOutput("schedule"))
)
)
),
width=20
)
server = function(input, output) {
selected_raceId <- reactive({
if (!is.null(input$race_search) && input$stats == "Race") {
raceId <- races[races$race_name == input$race_search, "raceId"]
return(raceId)
}
else { return(NULL) }
})
output$map = renderLeaflet({
races = races |>
filter(year==input$season)
leaflet(data=races) |>
addTiles() |>
setView(lng = -30, lat = 30, zoom = 2) |>
addCircleMarkers(radius = 5,
color = "#FF1E00",
popup=~paste("<b>Race:</b>", race_name,
"<br><b>Circuit:</b>", circuit_name,
"<br><b>City:</b>", location,
"<br><b>Country:</b>", country,
"<br><b>Date:</b>", date))
})
output$season_standings = renderPlot({
season_results = results |>
filter(year==input$season) |>
group_by(driverId, full_name, constr_name) |>
summarise(total_points = sum(points, na.rm = TRUE), .groups = "drop")
ggplot(season_results, aes(y=reorder(full_name, +total_points), x=total_points, fill = constr_name)) +
geom_bar(stat="identity") +
geom_text(aes(label = total_points), hjust = -0.2, size = 3) +
labs(x = "Total Points",
y = "Driver",
title = "Total Points per Driver",
fill = "Constructor") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8),
legend.position = "right")
})
output$schedule = renderDataTable({
races %>%
filter(year==input$season) |>
# select(Round=round, Date=date, Race=race_name, Circuit=circuit_name, Location=location, Country=country)
select(Date=date, Race=race_name)
})
output$position_table = renderDataTable({
results %>%
filter(year==input$season, raceId == selected_raceId()) |>
select(Position=positionText,
Forname=forename,
Surname=surname,
Number=driver_num,
Nationality=nationality,
Constructor=constr_name,
Time=time,
Points=points,
Status=status)
})
}
shinyApp(ui, server)
