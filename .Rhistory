time_races = seasonRaces() |>
select(date, race_name)
ggplot(time_races, aes(x = 1, y = date, label = race_name)) +
geom_segment(aes(x = 1, xend = 1, y = min(date), yend = max(date)), color = "grey", alpha=0.8) +
geom_point(color = "red", size = 2) +
geom_text(nudge_x = 0, vjust = 0.5, hjust=-0.1) +
geom_text(aes(label = as.character(date)), nudge_y = -0.05, hjust = 1.1, color = "black") +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
})
}
shinyApp(ui, server)
ui = fluidPage(
titlePanel(
# img(src="f1_logo.png"),
h1("Formula 1 Seasonal Statistics (1950-2023)", style={'color:white;
background-color:#FF1E00;
border-radius:5px;
padding:5px'})
),
navbarPage(
tabPanel("Overview",
fluidRow(
# selectInput("season", "Select Season", unique(seasons$year), selected = "2023")
column(4, img(src="f1_logo.png")),
column(8, selectInput("season", "Select Season", unique(seasons$year), selected = "2023")),
),
fluidRow(
column(12,
h3("Total Points Per Driver", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
plotOutput("season_standings")
)
),
fluidRow(
column(5,
h3("Race Schedule", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
plotOutput("timelinePlot")
),
column(7,
h3("Circuit Locations", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
leafletOutput("map")
)
),
fluidRow(
column(5,
selectizeInput("race", "Select a Race", NULL, multiple = FALSE)
),
),
fluidRow(
column(12,
h3("Race Results", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
dataTableOutput("position_table")
),
)
)
),
width=12
)
server = function(input, output, session) {
filteredRaces = reactive({
req(input$season)
subset(races, year == input$season)$race_name
})
seasonResults = reactive({
req(input$season)
results |>
filter(year==input$season)
})
seasonRaces = reactive({
req(input$season)
races |>
filter(year==input$season)
})
observeEvent(input$season, {
updateSelectInput(session, "race", choices = filteredRaces())
})
output$map = renderLeaflet({
leaflet(data=seasonRaces()) |>
addTiles() |>
setView(lng = -30, lat = 30, zoom = 2) |>
addCircleMarkers(radius = 5,
color = "#FF1E00",
popup=~paste("<b>Race:</b>", race_name,
"<br><b>Circuit:</b>", circuit_name,
"<br><b>City:</b>", location,
"<br><b>Country:</b>", country,
"<br><b>Date:</b>", date))
})
output$season_standings = renderPlot({
season_results = seasonResults() |>
group_by(driverId, full_name, constr_name) |>
summarise(total_points = sum(points, na.rm = TRUE), .groups = "drop")
ggplot(season_results, aes(y=reorder(full_name, +total_points), x=total_points, fill = constr_name)) +
geom_bar(stat="identity") +
geom_text(aes(label = total_points), hjust = -0.2, size = 3) +
labs(x = "Total Points",
y = "Driver",
title = "Total Points per Driver",
fill = "Constructor") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8),
legend.position = "right")
})
output$position_table = renderDataTable({
seasonResults() %>%
filter(race_name == input$race) |>
select(Position=positionText,
Forname=forename,
Surname=surname,
Number=driver_num,
Nationality=nationality,
Constructor=constr_name,
Time=time,
Points=points,
Status=status)
})
output$timelinePlot <- renderPlot({
time_races = seasonRaces() |>
select(date, race_name)
ggplot(time_races, aes(x = 1, y = date, label = race_name)) +
geom_segment(aes(x = 1, xend = 1, y = min(date), yend = max(date)), color = "grey", alpha=0.8) +
geom_point(color = "red", size = 2) +
geom_text(nudge_x = 0, vjust = 0.5, hjust=-0.1) +
geom_text(aes(label = as.character(date)), nudge_y = -0.05, hjust = 1.1, color = "black") +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
})
}
shinyApp(ui, server)
ui = fluidPage(
titlePanel(
# img(src="f1_logo.png"),
h1("Formula 1 Seasonal Statistics (1950-2023)", style={'color:white;
background-color:#FF1E00;
border-radius:5px;
padding:5px'})
),
navbarPage(
tabPanel("Overview",
fluidRow(
# selectInput("season", "Select Season", unique(seasons$year), selected = "2023")
column(12, selectInput("season", "Select Season", unique(seasons$year), selected = "2023")),
),
fluidRow(
column(12,
h3("Total Points Per Driver", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
plotOutput("season_standings")
)
),
fluidRow(
column(5,
h3("Race Schedule", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
plotOutput("timelinePlot")
),
column(7,
h3("Circuit Locations", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
leafletOutput("map")
)
),
fluidRow(
column(5,
selectizeInput("race", "Select a Race", NULL, multiple = FALSE)
),
),
fluidRow(
column(12,
h3("Race Results", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
dataTableOutput("position_table")
),
)
)
),
width=12
)
server = function(input, output, session) {
filteredRaces = reactive({
req(input$season)
subset(races, year == input$season)$race_name
})
seasonResults = reactive({
req(input$season)
results |>
filter(year==input$season)
})
seasonRaces = reactive({
req(input$season)
races |>
filter(year==input$season)
})
observeEvent(input$season, {
updateSelectInput(session, "race", choices = filteredRaces())
})
output$map = renderLeaflet({
leaflet(data=seasonRaces()) |>
addTiles() |>
setView(lng = -30, lat = 30, zoom = 2) |>
addCircleMarkers(radius = 5,
color = "#FF1E00",
popup=~paste("<b>Race:</b>", race_name,
"<br><b>Circuit:</b>", circuit_name,
"<br><b>City:</b>", location,
"<br><b>Country:</b>", country,
"<br><b>Date:</b>", date))
})
output$season_standings = renderPlot({
season_results = seasonResults() |>
group_by(driverId, full_name, constr_name) |>
summarise(total_points = sum(points, na.rm = TRUE), .groups = "drop")
ggplot(season_results, aes(y=reorder(full_name, +total_points), x=total_points, fill = constr_name)) +
geom_bar(stat="identity") +
geom_text(aes(label = total_points), hjust = -0.2, size = 3) +
labs(x = "Total Points",
y = "Driver",
title = "Total Points per Driver",
fill = "Constructor") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8),
legend.position = "right")
})
output$position_table = renderDataTable({
seasonResults() %>%
filter(race_name == input$race) |>
select(Position=positionText,
Forname=forename,
Surname=surname,
Number=driver_num,
Nationality=nationality,
Constructor=constr_name,
Time=time,
Points=points,
Status=status)
})
output$timelinePlot <- renderPlot({
time_races = seasonRaces() |>
select(date, race_name)
ggplot(time_races, aes(x = 1, y = date, label = race_name)) +
geom_segment(aes(x = 1, xend = 1, y = min(date), yend = max(date)), color = "grey", alpha=0.8) +
geom_point(color = "red", size = 2) +
geom_text(nudge_x = 0, vjust = 0.5, hjust=-0.1) +
geom_text(aes(label = as.character(date)), nudge_y = -0.05, hjust = 1.1, color = "black") +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
})
}
shinyApp(ui, server)
ui = fluidPage(
titlePanel(
# img(src="f1_logo.png"),
h1("Formula 1 Seasonal Statistics (1950-2023)", style={'color:white;
background-color:#FF1E00;
border-radius:5px;
padding:5px'})
),
navbarPage(
tabPanel("Overview",
fluidRow(
# selectInput("season", "Select Season", unique(seasons$year), selected = "2023")
column(12, selectInput("season", "Select Season", unique(seasons$year), selected = "2023")),
),
fluidRow(
column(12,
h3("Total Points Per Driver", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
plotOutput("season_standings")
)
),
fluidRow(
column(12,
h3("Total Points Per Driver", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
)
),
fluidRow(
column(5,
h3("Race Schedule", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
plotOutput("timelinePlot")
),
column(7,
h3("Circuit Locations", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
leafletOutput("map")
)
),
fluidRow(
column(5,
selectizeInput("race", "Select a Race", NULL, multiple = FALSE)
),
),
fluidRow(
column(12,
h3("Race Results", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
dataTableOutput("position_table")
),
)
)
),
width=12
)
server = function(input, output, session) {
filteredRaces = reactive({
req(input$season)
subset(races, year == input$season)$race_name
})
seasonResults = reactive({
req(input$season)
results |>
filter(year==input$season)
})
seasonRaces = reactive({
req(input$season)
races |>
filter(year==input$season)
})
observeEvent(input$season, {
updateSelectInput(session, "race", choices = filteredRaces())
})
output$map = renderLeaflet({
leaflet(data=seasonRaces()) |>
addTiles() |>
setView(lng = -30, lat = 30, zoom = 2) |>
addCircleMarkers(radius = 5,
color = "#FF1E00",
popup=~paste("<b>Race:</b>", race_name,
"<br><b>Circuit:</b>", circuit_name,
"<br><b>City:</b>", location,
"<br><b>Country:</b>", country,
"<br><b>Date:</b>", date))
})
output$season_standings = renderPlot({
season_results = seasonResults() |>
group_by(driverId, full_name, constr_name) |>
summarise(total_points = sum(points, na.rm = TRUE), .groups = "drop")
ggplot(season_results, aes(y=reorder(full_name, +total_points), x=total_points, fill = constr_name)) +
geom_bar(stat="identity") +
geom_text(aes(label = total_points), hjust = -0.2, size = 3) +
labs(x = "Total Points",
y = "Driver",
title = "Total Points per Driver",
fill = "Constructor") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8),
legend.position = "right")
})
output$position_table = renderDataTable({
seasonResults() %>%
filter(race_name == input$race) |>
select(Position=positionText,
Forname=forename,
Surname=surname,
Number=driver_num,
Nationality=nationality,
Constructor=constr_name,
Time=time,
Points=points,
Status=status)
})
output$timelinePlot <- renderPlot({
time_races = seasonRaces() |>
select(date, race_name)
ggplot(time_races, aes(x = 1, y = date, label = race_name)) +
geom_segment(aes(x = 1, xend = 1, y = min(date), yend = max(date)), color = "grey", alpha=0.8) +
geom_point(color = "red", size = 2) +
geom_text(nudge_x = 0, vjust = 0.5, hjust=-0.1) +
geom_text(aes(label = as.character(date)), nudge_y = -0.05, hjust = 1.1, color = "black") +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
})
}
shinyApp(ui, server)
ui = fluidPage(
titlePanel(
# img(src="f1_logo.png"),
h1("Formula 1 Seasonal Statistics (1950-2023)", style={'color:white;
background-color:#FF1E00;
border-radius:5px;
padding:5px'})
),
navbarPage(
tabPanel("Overview",
fluidRow(
# selectInput("season", "Select Season", unique(seasons$year), selected = "2023")
column(12, selectInput("season", "Select Season", unique(seasons$year), selected = "2023")),
),
fluidRow(
column(12,
h3("Total Points Per Driver", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
plotOutput("season_standings")
)
),
fluidRow(
column(5,
h3("Race Schedule", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
plotOutput("timelinePlot")
),
column(7,
h3("Circuit Locations", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
leafletOutput("map")
)
),
fluidRow(
column(5,
selectizeInput("race", "Select a Race", NULL, multiple = FALSE)
),
),
fluidRow(
column(12,
h3("Race Results", style = "color:white; background-color:#FF1E00; border-radius:5px; padding:5px"),
dataTableOutput("position_table")
),
)
)
),
width=12
)
server = function(input, output, session) {
filteredRaces = reactive({
req(input$season)
subset(races, year == input$season)$race_name
})
seasonResults = reactive({
req(input$season)
results |>
filter(year==input$season)
})
seasonRaces = reactive({
req(input$season)
races |>
filter(year==input$season)
})
observeEvent(input$season, {
updateSelectInput(session, "race", choices = filteredRaces())
})
output$map = renderLeaflet({
leaflet(data=seasonRaces()) |>
addTiles() |>
setView(lng = -30, lat = 30, zoom = 2) |>
addCircleMarkers(radius = 5,
color = "#FF1E00",
popup=~paste("<b>Race:</b>", race_name,
"<br><b>Circuit:</b>", circuit_name,
"<br><b>City:</b>", location,
"<br><b>Country:</b>", country,
"<br><b>Date:</b>", date))
})
output$season_standings = renderPlot({
season_results = seasonResults() |>
group_by(driverId, full_name, constr_name) |>
summarise(total_points = sum(points, na.rm = TRUE), .groups = "drop")
ggplot(season_results, aes(y=reorder(full_name, +total_points), x=total_points, fill = constr_name)) +
geom_bar(stat="identity") +
geom_text(aes(label = total_points), hjust = -0.2, size = 3) +
labs(x = "Total Points",
y = "Driver",
title = "Total Points per Driver",
fill = "Constructor") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8),
legend.position = "right")
})
output$position_table = renderDataTable({
seasonResults() %>%
filter(race_name == input$race) |>
select(Position=positionText,
Forname=forename,
Surname=surname,
Number=driver_num,
Nationality=nationality,
Constructor=constr_name,
Time=time,
Points=points,
Status=status)
})
output$timelinePlot <- renderPlot({
time_races = seasonRaces() |>
select(date, race_name)
ggplot(time_races, aes(x = 1, y = date, label = race_name)) +
geom_segment(aes(x = 1, xend = 1, y = min(date), yend = max(date)), color = "grey", alpha=0.8) +
geom_point(color = "red", size = 2) +
geom_text(nudge_x = 0, vjust = 0.5, hjust=-0.1) +
geom_text(aes(label = as.character(date)), nudge_y = -0.05, hjust = 1.1, color = "black") +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
})
}
shinyApp(ui, server)
