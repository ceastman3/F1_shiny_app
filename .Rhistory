multiple = TRUE),
plotOutput("scatterplot")
)
server <- function(input, output) {
filteredData <- reactive({
if (length(input$dropdown) == 0) {
olympics %>%
mutate(selected = TRUE) # Assume all selected if none are specifically chosen
} else {
olympics %>%
mutate(selected = Sport %in% input$dropdown)
}
})
# Render the scatterplot
output$scatterplot <- renderPlot({
scatterplot(filteredData())
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
olympics <- read_csv("https://uwmadison.box.com/shared/static/rzw8h2x6dp5693gdbpgxaf2koqijo12l.csv")
#' Scatterplot with highlighted points
#'
#' Assumes a column in df called "selected" saying whether points should be
#' larger / darker
scatterplot <- function(df) {
ggplot(df) +
geom_point(aes(x = Weight, y = `Height, cm`,
alpha = as.numeric(selected),
size = as.numeric(selected),
color = Sport)) +
scale_alpha(range = c(0.05, .8)) +
scale_size(range = c(0.1, 1))
}
ui <- fluidPage(
selectInput("dropdown", "Select a Sport", choices = unique(olympics$Sport),
multiple = TRUE,
selected="Boxing"),
plotOutput("scatterplot")
)
server <- function(input, output) {
filteredData <- reactive({
# Filter dataset based on selected sports or default to Boxing if none selected
if (length(input$dropdown) == 0) {
selected_sports <- "Boxing"
} else {
selected_sports <- input$dropdown
}
filtered <- olympics %>%
filter(Sport %in% selected_sports) %>%
mutate(selected = TRUE) # Now, 'selected' is simply used to ensure all are highlighted
return(filtered)
})
output$scatterplot <- renderPlot({
scatterplot(filteredData())
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
olympics <- read_csv("https://uwmadison.box.com/shared/static/rzw8h2x6dp5693gdbpgxaf2koqijo12l.csv")
#' Scatterplot with highlighted points
#'
#' Assumes a column in df called "selected" saying whether points should be
#' larger / darker
scatterplot <- function(df) {
ggplot(df) +
geom_point(aes(x = Weight, y = `Height, cm`,
alpha = as.numeric(selected),
size = as.numeric(selected),
color = Sport)) +
scale_alpha(range = c(0.05, .8)) +
scale_size(range = c(0.1, 1))
}
ui <- fluidPage(
selectInput("dropdown", "Select a Sport", choices = unique(olympics$Sport),
multiple = TRUE,
selected="Athletics"),
plotOutput("scatterplot")
)
library(shiny)
library(tidyverse)
olympics <- read_csv("https://uwmadison.box.com/shared/static/rzw8h2x6dp5693gdbpgxaf2koqijo12l.csv")
#' Scatterplot with highlighted points
#'
#' Assumes a column in df called "selected" saying whether points should be
#' larger / darker
scatterplot <- function(df) {
ggplot(df) +
geom_point(
aes(Weight, `Height, cm`,
alpha = as.numeric(selected),
size = as.numeric(selected))
) +
scale_alpha(range = c(0.05, .8)) +
scale_size(range = c(0.1, 1))
}
ui <- fluidPage(
selectInput("dropdown", "Select a Sport", choices = unique(olympics$Sport), multiple = TRUE),
plotOutput("scatterplot")
)
server <- function(input, output) {
output$scatterplot <- renderPlot({
# Check if any sport is selected, otherwise show all
if (length(input$dropdown) == 0) {
selected_athletes <- olympics
} else {
selected_athletes <- olympics %>%
mutate(selected = Sport %in% input$dropdown) # Update 'selected' based on dropdown
}
# Render the scatterplot with the filtered or updated dataset
scatterplot(selected_athletes)
})
}
shinyApp(ui, server)
server <- function(input, output) {
output$scatterplot <- renderPlot({
# Check if any sport is selected, otherwise show all
if (length(input$dropdown) == 0) {
selected_athletes <- "Boxing"
} else {
selected_athletes <- olympics %>%
mutate(selected = Sport %in% input$dropdown) # Update 'selected' based on dropdown
}
# Render the scatterplot with the filtered or updated dataset
scatterplot(selected_athletes)
})
}
shinyApp(ui, server)
server <- function(input, output) {
output$scatterplot = renderPlot({
# if (length(input$dropdown) == 0) {
#   selected_athletes <- "Boxing"
# } else {
#   selected_athletes <- olympics %>%
#     mutate(selected = Sport %in% input$dropdown) # Update 'selected' based on dropdown
# }
selected_athletes = olympics |>
mutate(selected = Sport %in% input$dropdown)
scatterplot(selected_athletes)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("dropdown", "Select a Sport", choices = unique(olympics$Sport), multiple = TRUE),
plotOutput("scatterplot"),
dataTableOutput("table")
)
server <- function(input, output) {
filteredData <- reactive({
# if (length(input$dropdown) == 0) {
#   selected_sports <- "Athletics"
# } else {
#   selected_sports <- input$dropdown
# }
filtered <- olympics %>%
filter(Sport %in% input$dropdown) %>%
mutate(selected = TRUE)
return(filtered)
})
output$scatterplot <- renderPlot({
scatterplot(filteredData())
})
output$table <- renderDataTable({ filteredData() })
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("dropdown", "Select a Sport", choices = unique(olympics$Sport), multiple = TRUE),
plotOutput("scatterplot"),
dataTableOutput("table")
)
server <- function(input, output) {
filteredData <- reactive({
filtered <- olympics %>%
filter(Sport %in% input$dropdown) #%>%
#mutate(selected = TRUE)
return(filtered)
})
output$scatterplot <- renderPlot({
scatterplot(filteredData())
})
output$table <- renderDataTable({ filteredData() })
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("dropdown", "Select a Sport", choices = unique(olympics$Sport), multiple = TRUE),
plotOutput("scatterplot"),
dataTableOutput("table")
)
server <- function(input, output) {
filteredData <- reactive({
filtered <- olympics %>%
filter(Sport %in% input$dropdown) %>%
mutate(selected = TRUE)
return(filtered)
})
output$scatterplot <- renderPlot({
scatterplot(filteredData())
})
output$table <- renderDataTable({ filteredData() })
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("dropdown", "Select a Sport", choices = unique(olympics$Sport), multiple = TRUE),
plotOutput("scatterplot"),
dataTableOutput("table")
)
server <- function(input, output) {
selected_athletes <- reactive({
athletes <- olympics %>%
filter(Sport %in% input$dropdown) %>%
mutate(selected = TRUE)
return(athletes)
})
output$scatterplot <- renderPlot({
scatterplot(selected_athletes())
})
output$table <- renderDataTable({ selected_athletes() })
}
shinyApp(ui, server)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
library(caret)
library(DALEX)
library(tidyverse)
th <- theme_minimal() +
theme(
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#f7f7f7"),
panel.border = element_rect(fill = NA, color = "#0c0c0c", size = 0.6),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
legend.position = "bottom"
)
theme_set(th)
salary <- read_csv("https://github.com/krisrs1128/stat436_s24/raw/main/data/Glassdoor%20Gender%20Pay%20Gap.csv")
x <- salary |>
select(Gender:Seniority) |>
mutate(across(where(is.character), as.factor)) # gbm needs chr -> factor
y <- salary$BasePay
fit <- train(x, y, method = "gbm", verbose = FALSE)
salary <- read_csv("https://github.com/krisrs1128/stat436_s24/raw/main/data/Glassdoor%20Gender%20Pay%20Gap.csv")
x <- salary |>
select(Gender:Seniority) |>
mutate(across(where(is.character), as.factor)) # gbm needs chr -> factor
y <- salary$BasePay
fit <- train(x, y, method = "gbm", verbose = FALSE)
y_hat <- predict(fit)
tibble(y = y, y_hat = y_hat) |>
ggplot() +
geom_abline(slope = 1, col = "red", linewidth = 1.5) +
geom_point(aes(y, y_hat)) +
coord_fixed()
explanation <- explain(fit, data = x, y = y)
profile <- model_profile(explanation, groups = "Gender")
plot(profile)
#profile <- model_profile(explanation, groups = "Gender")
plot(profile, geom = "profiles")
knitr::opts_chunk$set(echo = TRUE)
# kaggle datasets download -d rohanrao/formula-1-world-championship-1950-2020
library(tidyverse)
getcwd()
getwd()
ls
races = read.csv("/data/drivers.csv")
setwd("/Users/eastman/Desktop/STAT436/homeworks/hw_4")
getwd()
races = read.csv("/data/drivers.csv")
races = read.csv("./data/drivers.csv")
head(races)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
head(races)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023)
head(races)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv") |>
filter(races$year == 2023)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023)
head(races)
View(races)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023)
constructors = read.csv("./data/constructors.csv")
circuits = read.csv("./data/circuits.csv")
results = read.csv("/data/results.csv")
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023)
constructors = read.csv("./data/constructors.csv")
circuits = read.csv("./data/circuits.csv")
results = read.csv("./data/results.csv")
results = results |>
filter(results$raceId >= 1098)
head(results)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023) |>
select(raceId, year, round, circuitid, name, date)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023) |>
select("raceId", "year", "round", "circuitid", "name", "date")
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023) |>
select("raceId", "year", "round", "circuitId", "name", "date")
constructors = read.csv("./data/constructors.csv")
circuits = read.csv("./data/circuits.csv")
results = read.csv("./data/results.csv")
results = results |>
filter(results$raceId >= 1098)
head(races)
left_join?
drivers = read.csv("./data/drivers.csv")
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023) |>
select("raceId", "year", "round", "circuitId", "name", "date")
constructors = read.csv("./data/constructors.csv")
circuits = read.csv("./data/circuits.csv")
results = read.csv("./data/results.csv")
results = results |>
filter(results$raceId >= 1098)
races = left_join(races, circuits, by="circuitId")
head(races)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023) |>
select("raceId", "year", "round", "circuitId", "name", "date")
constructors = read.csv("./data/constructors.csv")
circuits = read.csv("./data/circuits.csv")
results = read.csv("./data/results.csv")
results = results |>
filter(results$raceId >= 1098)
races = left_join(races, circuits, by="circuitId") |>
rename(
race_name = name.x,
circuit_name = name.y
)
head(races)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023) |>
select("raceId", "year", "round", "circuitId", "name", "date")
constructors = read.csv("./data/constructors.csv")
circuits = read.csv("./data/circuits.csv")
results = read.csv("./data/results.csv")
results = results |>
filter(results$raceId >= 1098)
races = left_join(races, circuits, by="circuitId") |>
rename(
race_name = name.x,
circuit_name = name.y
) |>
select(-alt, -url)
head(races)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023) |>
select("raceId", "year", "round", "circuitId", "name", "date")
constructors = read.csv("./data/constructors.csv")
circuits = read.csv("./data/circuits.csv")
results = read.csv("./data/results.csv")
results = results |>
filter(results$raceId >= 1098)
races = left_join(races, circuits, by="circuitId") |>
rename(
race_name = name.x,
circuit_name = name.y
) |>
select(-alt, -url)
results = left_join(results, drivers, by="driverId")
head(results)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023) |>
select("raceId", "year", "round", "circuitId", "name", "date")
constructors = read.csv("./data/constructors.csv")
circuits = read.csv("./data/circuits.csv")
results = read.csv("./data/results.csv")
results = results |>
filter(results$raceId >= 1098)
races = left_join(races, circuits, by="circuitId") |>
rename(
race_name = name.x,
circuit_name = name.y
) |>
select(-alt, -url)
results = left_join(results, drivers, by="driverId") |>
rename( driver_num = number.y ) |>
select(-number.x, -url)
head(results)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023) |>
select("raceId", "year", "round", "circuitId", "name", "date")
constructors = read.csv("./data/constructors.csv")
circuits = read.csv("./data/circuits.csv")
results = read.csv("./data/results.csv")
constructor_standings = read.csv("./data/constructor_standings.csv")
results = results |>
filter(results$raceId >= 1098)
races = left_join(races, circuits, by="circuitId") |>
rename(
race_name = name.x,
circuit_name = name.y
) |>
select(-alt, -url)
results = left_join(results, drivers, by="driverId") |>
rename( driver_num = number.y ) |>
select(-number.x, -url)
head(results)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023) |>
select("raceId", "year", "round", "circuitId", "name", "date")
constructors = read.csv("./data/constructors.csv")
circuits = read.csv("./data/circuits.csv")
results = read.csv("./data/results.csv")
constructor_standings = read.csv("./data/constructor_standings.csv")
constructor_standings = constructor_standings |>
filter(raceId >= 1098)
results = results |>
filter(results$raceId >= 1098)
races = left_join(races, circuits, by="circuitId") |>
rename(
race_name = name.x,
circuit_name = name.y
) |>
select(-alt, -url)
results = left_join(results, drivers, by="driverId") |>
rename( driver_num = number.y ) |>
select(-number.x, -url)
constructor_standings = left_join(constructor_standings,
constructors,
by="constructorId")
head(results)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023) |>
select("raceId", "year", "round", "circuitId", "name", "date")
constructors = read.csv("./data/constructors.csv")
circuits = read.csv("./data/circuits.csv")
results = read.csv("./data/results.csv")
constructor_standings = read.csv("./data/constructor_standings.csv")
constructor_standings = constructor_standings |>
filter(raceId >= 1098)
results = results |>
filter(results$raceId >= 1098)
races = left_join(races, circuits, by="circuitId") |>
rename(
race_name = name.x,
circuit_name = name.y
) |>
select(-alt, -url)
results = left_join(results, drivers, by="driverId") |>
rename( driver_num = number.y ) |>
select(-number.x, -url)
constructor_standings = left_join(constructor_standings,
constructors,
by="constructorId")
head(constructor_standings)
drivers = read.csv("./data/drivers.csv")
races = read.csv("./data/races.csv")
races = races |>
filter(races$year == 2023) |>
select("raceId", "year", "round", "circuitId", "name", "date")
constructors = read.csv("./data/constructors.csv")
circuits = read.csv("./data/circuits.csv")
results = read.csv("./data/results.csv")
constructor_standings = read.csv("./data/constructor_standings.csv")
constructor_standings = constructor_standings |>
filter(raceId >= 1098)
results = results |>
filter(results$raceId >= 1098)
races = left_join(races, circuits, by="circuitId") |>
rename(
race_name = name.x,
circuit_name = name.y
) |>
select(-alt, -url)
results = left_join(results, drivers, by="driverId") |>
rename( driver_num = number.y ) |>
select(-number.x, -url)
constructor_standings = left_join(constructor_standings,
constructors,
by="constructorId") |>
select(-positionText, -url, -constructorStandingsId)
head(constructor_standings)
